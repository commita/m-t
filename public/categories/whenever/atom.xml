<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: whenever | Monospaced Thoughts]]></title>
  <link href="http://monospaced-thoughts.com/categories/whenever/atom.xml" rel="self"/>
  <link href="http://monospaced-thoughts.com/"/>
  <updated>2012-01-14T02:25:11-02:00</updated>
  <id>http://monospaced-thoughts.com/</id>
  <author>
    <name><![CDATA[Commita Technology]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rubber and whenever integration]]></title>
    <link href="http://monospaced-thoughts.com/2011/02/25/rubber-and-whenever-integration/"/>
    <updated>2011-02-25T00:00:00-03:00</updated>
    <id>http://monospaced-thoughts.com/2011/02/25/rubber-and-whenever-integration</id>
    <content type="html"><![CDATA[<p>If you are using <a href="http://github.com/wr0ngway/rubber">rubber</a> gem to deploy to
Amazon's EC2 infra-structure and also using
<a href="http://github.com/javan/whenever">whenever</a> to manage cron jobs, you'll
probably find yourself thinking how to integrate both.</p>

<p>I myself too was wondering about this. The obvious first try was to add
<em>whenever</em>'s capistrano tasks to <code>config/deploy.rb</code> by following its
<a href="http://github.com/javan/whenever/blob/master/README.md">recommendation</a> (see
the "Capistrano integration" section). Long story short, it didn't work. When I
deployed with <code>cap deploy</code>, <em>whenever</em> would actually write to crontab, but
only to be replaced by <em>rubber</em>'s own version later, as we can see in this log:</p>

<p><div><script src='https://gist.github.com/843670.js?file='></script>
<noscript><pre><code>triggering after callbacks for `deploy:update_code'
...
* executing `whenever:update_crontab'
...
** [out :: server] [write] crontab file updated
command finished

(... later rubber will upload config files and recipes and then run rake rubber:config on the server)

** [out :: server] Rubber[INFO]: Transforming &lt;...&gt;/config/rubber/common/crontab</code></pre></noscript></div>
</p>

<p>Last line shows when <em>rubber</em> transforms and runs the common crontab config and
overwrites <em>whenever</em>'s cron jobs.</p>

<p>So, a second, and more successful, try was to avoid capistrano's regular
recipes and instead add a <em>whenever</em> crontab config to <em>rubber</em>.</p>

<p>One could "quick-and-dirty"-ly add the expected <em>whenever</em> output to
<code>config/rubber/common/crontab</code> file, but a better approach is to create a
config for the <code>db</code> role to install <em>whenever</em> output to crontab:</p>

<p><div><script src='https://gist.github.com/843668.js?file='></script>
<noscript><pre><code># config/rubber/role/db/crontab-whenever

&lt;%
  @read_cmd = 'crontab -l'
  @write_cmd = 'crontab -'
  @additive = [&quot;# whenever-start&quot;, &quot;# whenever-end&quot;]
%&gt;

&lt;%= `cd #{RUBBER_ROOT} &amp;&amp; bundle exec whenever --set environment=&quot;#{RUBBER_ENV}&quot; -f &quot;#{RUBBER_ROOT}/config/schedule.rb&quot;` %&gt;</code></pre></noscript></div>
</p>

<p><em>One note on the above is to pay attention to keep the <code>@additive</code>
configuration so the crontab is appended with this section rather than
overwritten. If you check the <code>config/rubber/common/crontab</code> file, it hasn't
this entry and effectively overwrites the previous crontab.</em></p>

<p>And that was it. One <code>cap deploy</code> and the crontab was filled with <em>rubber</em>'s
jobs and <em>whenever</em>'s too.</p>
]]></content>
  </entry>
  
</feed>
